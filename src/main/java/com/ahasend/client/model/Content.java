/*
 * AhaSend Email API
 * This is the API documentation for sending emails via [AhaSend.com](https://ahasend.com). To use this API you need to get your API Key from your account under the API Keys page.
 *
 * OpenAPI spec version: 1.0.1
 * Contact: support@ahasend.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.ahasend.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.ahasend.client.model.Attachment;
import com.ahasend.client.model.Contact;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * Content
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-04-15T10:12:27.933925439Z[GMT]")

public class Content {
  @JsonProperty("subject")
  private String subject = null;

  @JsonProperty("text_body")
  private String textBody = null;

  @JsonProperty("html_body")
  private String htmlBody = null;

  @JsonProperty("attachments")
  private List<Attachment> attachments = null;

  @JsonProperty("reply_to")
  private Contact replyTo = null;

  @JsonProperty("headers")
  private Map<String, String> headers = null;

  public Content subject(String subject) {
    this.subject = subject;
    return this;
  }

   /**
   * Get subject
   * @return subject
  **/
  @Schema(required = true, description = "")
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }

  public Content textBody(String textBody) {
    this.textBody = textBody;
    return this;
  }

   /**
   * Plaintext body of the email
   * @return textBody
  **/
  @Schema(description = "Plaintext body of the email")
  public String getTextBody() {
    return textBody;
  }

  public void setTextBody(String textBody) {
    this.textBody = textBody;
  }

  public Content htmlBody(String htmlBody) {
    this.htmlBody = htmlBody;
    return this;
  }

   /**
   * HTML body of the email
   * @return htmlBody
  **/
  @Schema(description = "HTML body of the email")
  public String getHtmlBody() {
    return htmlBody;
  }

  public void setHtmlBody(String htmlBody) {
    this.htmlBody = htmlBody;
  }

  public Content attachments(List<Attachment> attachments) {
    this.attachments = attachments;
    return this;
  }

  public Content addAttachmentsItem(Attachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<Attachment>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * Get attachments
   * @return attachments
  **/
  @Schema(description = "")
  public List<Attachment> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<Attachment> attachments) {
    this.attachments = attachments;
  }

  public Content replyTo(Contact replyTo) {
    this.replyTo = replyTo;
    return this;
  }

   /**
   * Get replyTo
   * @return replyTo
  **/
  @Schema(description = "")
  public Contact getReplyTo() {
    return replyTo;
  }

  public void setReplyTo(Contact replyTo) {
    this.replyTo = replyTo;
  }

  public Content headers(Map<String, String> headers) {
    this.headers = headers;
    return this;
  }

  public Content putHeadersItem(String key, String headersItem) {
    if (this.headers == null) {
      this.headers = new HashMap<String, String>();
    }
    this.headers.put(key, headersItem);
    return this;
  }

   /**
   * Specify arbitary headers.
   * @return headers
  **/
  @Schema(example = "{\"X-My-Mail-ID\":\"12345\",\"X-Comment-ID\":\"456789\"}", description = "Specify arbitary headers.")
  public Map<String, String> getHeaders() {
    return headers;
  }

  public void setHeaders(Map<String, String> headers) {
    this.headers = headers;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Content content = (Content) o;
    return Objects.equals(this.subject, content.subject) &&
        Objects.equals(this.textBody, content.textBody) &&
        Objects.equals(this.htmlBody, content.htmlBody) &&
        Objects.equals(this.attachments, content.attachments) &&
        Objects.equals(this.replyTo, content.replyTo) &&
        Objects.equals(this.headers, content.headers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subject, textBody, htmlBody, attachments, replyTo, headers);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Content {\n");
    
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    textBody: ").append(toIndentedString(textBody)).append("\n");
    sb.append("    htmlBody: ").append(toIndentedString(htmlBody)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    replyTo: ").append(toIndentedString(replyTo)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
