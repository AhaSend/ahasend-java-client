/*
 * AhaSend Email API
 * This is the API documentation for sending emails via [AhaSend.com](https://ahasend.com). To use this API you need to get your API Key from your account under the API Keys page.
 *
 * OpenAPI spec version: 1.0.1
 * Contact: support@ahasend.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.ahasend.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Attachment
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-04-15T10:12:27.933925439Z[GMT]")

public class Attachment {
  @JsonProperty("data")
  private String data = null;

  @JsonProperty("base64")
  private Boolean base64 = null;

  @JsonProperty("content_type")
  private String contentType = null;

  @JsonProperty("content_id")
  private String contentId = null;

  @JsonProperty("file_name")
  private String fileName = null;

  public Attachment data(String data) {
    this.data = data;
    return this;
  }

   /**
   * The attachment data. If the base64 field is true, this data must be encoded using base64. Otherwise, it will be interpreted as UTF-8.
   * @return data
  **/
  @Schema(required = true, description = "The attachment data. If the base64 field is true, this data must be encoded using base64. Otherwise, it will be interpreted as UTF-8.")
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }

  public Attachment base64(Boolean base64) {
    this.base64 = base64;
    return this;
  }

   /**
   * If set to true, data needs to be encoded using base64. Otherwise data will be interpreted as UTF-8.
   * @return base64
  **/
  @Schema(description = "If set to true, data needs to be encoded using base64. Otherwise data will be interpreted as UTF-8.")
  public Boolean isBase64() {
    return base64;
  }

  public void setBase64(Boolean base64) {
    this.base64 = base64;
  }

  public Attachment contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

   /**
   * Get contentType
   * @return contentType
  **/
  @Schema(required = true, description = "")
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }

  public Attachment contentId(String contentId) {
    this.contentId = contentId;
    return this;
  }

   /**
   * If specified, this attachment will be added as an inline attachment and a multipart/related MIME container will be generated in the message to hold it and the textual content.
   * @return contentId
  **/
  @Schema(description = "If specified, this attachment will be added as an inline attachment and a multipart/related MIME container will be generated in the message to hold it and the textual content.")
  public String getContentId() {
    return contentId;
  }

  public void setContentId(String contentId) {
    this.contentId = contentId;
  }

  public Attachment fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

   /**
   * Get fileName
   * @return fileName
  **/
  @Schema(required = true, description = "")
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Attachment attachment = (Attachment) o;
    return Objects.equals(this.data, attachment.data) &&
        Objects.equals(this.base64, attachment.base64) &&
        Objects.equals(this.contentType, attachment.contentType) &&
        Objects.equals(this.contentId, attachment.contentId) &&
        Objects.equals(this.fileName, attachment.fileName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, base64, contentType, contentId, fileName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Attachment {\n");
    
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    base64: ").append(toIndentedString(base64)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    contentId: ").append(toIndentedString(contentId)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
